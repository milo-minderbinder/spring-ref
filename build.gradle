apply plugin: 'war'
apply plugin: 'tomcat'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'propdeps'
apply plugin: 'propdeps-maven'
apply plugin: 'propdeps-eclipse'
apply plugin: 'eclipse-wtp'
apply plugin: 'eclipse'

println "Project=" + project.name
ext {
	// Application container
	tomcatVersion = "7.0.42"
	javaxServletVersion = "3.0.1"
	
	//Configuration
	jasyptVersion = "1.9.2"
	jasyptSpring31Version = "1.9.2"
	
	// MVC
	springVersion = "4.1.5.RELEASE"
	
	// Database
	postgresVersion = "9.4-1201-jdbc41"
	h2Version = "1.4.185"
	springDataJpaVersion = "1.7.1.RELEASE"
	hibernateJpaApiVersion = "1.0.0.Final"
	hibernateEntityManagerVersion = "4.3.8.Final"
	cglibVersion = "3.1"
	
	// Security
	springSecurityVersion = "3.2.6.RELEASE"
	passwordPolicyVersion = "1.0.0"
	
	// Template engine
	thymeleafSpringVersion = "2.1.4.RELEASE"
	thymeleafSpringSecurityVersion = "2.1.1.RELEASE"
	
	// Validation
	javaxValidationApiVersion = "1.1.0.Final"
	hibernateValidatorVersion = "5.1.3.Final"
	
	// Logging
	slf4jVersion = "1.7.10"
	
	// Testing
	junitVersion = "4.12"
	mockitoVersion = "1.10.19"
	hamcrestVersion = "1.3"
}	
	
buildscript {
	def tomcatPluginVersion = "1.2.4"
    def propdepsPluginVersion = "0.0.7"
	
	repositories {
		mavenCentral()
		mavenLocal()
		jcenter()
		maven {
			url 'http://download.java.net/maven/2'
			url 'http://repo.spring.io/plugins-release'
		}
	}
	
	dependencies {
		classpath "org.gradle.api.plugins:gradle-tomcat-plugin:$tomcatPluginVersion"
		classpath "org.springframework.build.gradle:propdeps-plugin:$propdepsPluginVersion"
	}
}

repositories {
	mavenCentral()
	mavenLocal()
	jcenter()
	maven { url 'http://download.java.net/maven/2' }
	maven { url 'http://repo.spring.io/libs-release' }
	maven { url 'http://repo.spring.io/plugins-release' }
	maven { url 'http://repo.spring.io/release' }
	maven { url 'http://repo.spring.io/milestone' }
	maven { url 'https://raw.githubusercontent.com/Baqend/Orestes-Bloomfilter/master/maven-repo' }
}

dependencies {
	// Application container
	tomcat "org.apache.tomcat.embed:tomcat-embed-core:$tomcatVersion",
		   "org.apache.tomcat.embed:tomcat-embed-logging-juli:$tomcatVersion"
	tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:$tomcatVersion") {
		exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
	}
	providedCompile "javax.servlet:javax.servlet-api:$javaxServletVersion"
	//compile "javax.servlet:javax.servlet-api:$javaxServletVersion"
	
	// Configuration
	compile "org.jasypt:jasypt:$jasyptVersion"
	compile "org.jasypt:jasypt-spring31:$jasyptSpring31Version"
	
	// MVC
	compile "org.springframework:spring-core:$springVersion"
	compile "org.springframework:spring-webmvc:$springVersion"
	
	// Database
	compile "org.springframework.data:spring-data-jpa:$springDataJpaVersion"
	compile "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:$hibernateJpaApiVersion"
	compile "org.hibernate:hibernate-entitymanager:$hibernateEntityManagerVersion"
	['spring-orm', 'spring-aop', 'spring-beans', 'spring-tx', 'spring-expression', 'spring-context'].each {
		compile "org.springframework:$it:$springVersion"
	}
	compile "cglib:cglib:$cglibVersion"
	compile "org.postgresql:postgresql:$postgresVersion"
	runtime "com.h2database:h2:$h2Version"
	
	// Security
	compile "org.springframework.security:spring-security-web:$springSecurityVersion"
	compile "org.springframework.security:spring-security-core:$springSecurityVersion"
	compile "org.springframework.security:spring-security-config:$springSecurityVersion"
	compile "co.insecurity:password-policy:$passwordPolicyVersion"
	
	// Template engine
	compile "org.thymeleaf:thymeleaf-spring4:$thymeleafSpringVersion"
	compile "org.thymeleaf.extras:thymeleaf-extras-springsecurity3:$thymeleafSpringSecurityVersion"
	
	// Validation
	compile "javax.validation:validation-api:$javaxValidationApiVersion"
	compile "org.hibernate:hibernate-validator:$hibernateValidatorVersion"
	
	// Logging
	compile "org.slf4j:slf4j-api:$slf4jVersion"
	runtime "org.slf4j:slf4j-log4j12:$slf4jVersion"

	// Test env
	testCompile "org.springframework:spring-test:$springVersion"
	testCompile "junit:junit:$junitVersion"
	testCompile "org.mockito:mockito-core:$mockitoVersion"
	testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"
}

test {
  testLogging {
    // Show that tests are run in the command-line output
    events 'started', 'passed'
  }
}

eclipse {
	classpath {
		downloadJavadoc = true
		file {
			withXml { xml ->
				def node = xml.asNode()
				node.remove(node.find { it.@path == 'org.eclipse.jst.j2ee.internal.web.container' })
				node.appendNode('classpathentry', [ kind: 'con', path: 'org.eclipse.jst.j2ee.internal.web.container', exported: 'true' ])
			}
		}
	}
}

task wrapper(type: Wrapper) { 
	gradleVersion = '2.1' 
}
